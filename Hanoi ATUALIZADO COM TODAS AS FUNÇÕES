#include <stdio.h>
#include <stdlib.h>

int numDiscos=8;

void imprime( int *tab, int fil, int col, int ultNum )
{
	/*
	PrecondiciÃ³n:
					*tab	Ponteiro
					fil		linhas
					col	 	colunas
					disc	discos
					ultNum	numero maior
*/


	int f, c;
	int i, esp;


	for( c=col-1; c >= 0; c-- )
	{
		for( f=0; f < fil; f++ )
		{
			esp = ( ultNum - tab[col*f+c] )/2;

			for( i=0; i < esp; i++ )
				printf( " " );

			for( i=0; i < tab[col*f+c]; i++ )
				printf( "*" );

			for( i=0; i < esp; i++ )
				printf( " " );

			printf( "\t" );
		};

		printf( "\n" );
	}


}


void move( int *tab, int fil, int col, int ultNum, int filOrig, int filDest)
{
	/*

					*tab	ponteiro
					fil		linha
					col		coluna
					disc	discos
					ultNum	numero maior
					filOrig	fila de origem numero/disco
					filDest	fila de destino numero/disco.


	*/


	int cO=col-1, cD=col-1;


	while( cO >= 0  &&  tab[col*filOrig+cO] == 0 )
	{
		cO--;
	};
	if( cO < 0 )
		cO = 0;

	while( cD >= 0  &&  tab[col*filDest+cD] == 0 )
	{
		cD--;
	};

	tab[col*filDest+cD+1] = tab[col*filOrig+cO];
	tab[col*filOrig+cO] = 0;

	imprime( tab, fil, col, ultNum );
};


void hanoi( int *tab, int fil, int col, int disc, int ultNum, int O, int A, int B , int D)
{

	if( disc==1 )
	{

		move(tab, fil, col, ultNum, O, D);
		if(col<=5); else if(col<=10) ; else if(col<=15); else if(col>15); else if(col<=20); else if(col>20);
	}
	else
	{
		hanoi( tab, fil, col, disc-1, ultNum, O, B, D, A);


		move( tab, fil, col, ultNum, O, D );
		if(col<=5); else if(col<=10) ; else if(col<=15); else if(col>15);

		hanoi( tab, fil, col, disc-1, ultNum, A, O, B, D);
	}

};


main()
{
	int fil=4, col, *tablero = NULL;
	int f, c, disc=1, ultNum;


	col=numDiscos;


	tablero = (int *)malloc( sizeof(int)*fil*col);


	//resta as torres
	for( f=0; f < fil; f++ )
		for( c=col-1; c >= 0; c-- )
			if( f==0 )
			{
				tablero[col*f+c] = disc;
				disc+=2;
			}
			else
				tablero[col*f+c] = 0;

	ultNum = disc;


	imprime( tablero, fil, col, ultNum );


	hanoi( tablero, fil, col, col, ultNum, 0, 1, 2, 3);
};
